generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String
  role          UserRole  @default(USER)
  organizationId String?
  organization  Organization? @relation(fields: [organizationId], references: [id])
  documents     Document[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Organization {
  id        String     @id @default(cuid())
  name      String
  users     User[]
  documents Document[]
  playbooks Playbook[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("organizations")
}

model Document {
  id             String           @id @default(cuid())
  filename       String
  originalName   String
  fileUrl        String
  fileSize       Int
  mimeType       String
  status         ProcessingStatus @default(PENDING)
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization?   @relation(fields: [organizationId], references: [id])
  analysis       Analysis?
  reviews        Review[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("documents")
}

model Analysis {
  id               String    @id @default(cuid())
  documentId       String    @unique
  document         Document  @relation(fields: [documentId], references: [id])
  riskScore        Float
  overallSummary   String
  plainEnglish     String
  keyTerms         Json
  riskFactors      Json
  recommendations  Json
  clauses          Clause[]
  vectorId         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("analyses")
}

model Clause {
  id          String     @id @default(cuid())
  analysisId  String
  analysis    Analysis   @relation(fields: [analysisId], references: [id])
  type        ClauseType
  content     String
  riskLevel   RiskLevel
  explanation String
  suggestions Json
  position    Json
  createdAt   DateTime   @default(now())

  @@map("clauses")
}

model Review {
  id         String       @id @default(cuid())
  documentId String
  document   Document     @relation(fields: [documentId], references: [id])
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  status     ReviewStatus
  comments   String?
  decisions  Json
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("reviews")
}

model Playbook {
  id             String       @id @default(cuid())
  name           String
  description    String?
  industry       String
  riskCriteria   Json
  promptTemplate String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("playbooks")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ClauseType {
  TERMINATION
  PAYMENT
  LIABILITY
  CONFIDENTIALITY
  INTELLECTUAL_PROPERTY
  DISPUTE_RESOLUTION
  FORCE_MAJEURE
  OTHER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}